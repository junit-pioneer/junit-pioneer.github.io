// -----
// SETUP
// -----

ext {
	onCi = System.getenv("CI")
}

configure(rootProject) {

	task wrapper(type: Wrapper) {
		description = 'Generates gradlew and gradlew.bat scripts'
		gradleVersion = '3.5'
		jarFile = "${project.projectDir}/.infra/gradle/gradle-wrapper.jar"
	}

}

task setupGitOnCi(type: Exec) {
	commandLine './git-ci-setup.sh'
}

task setupGitRepo(type: Exec) {
	commandLine './git-repo-setup.sh'
	if (onCi)
		dependsOn setupGitOnCi
}

task setupJekyll(type: Exec) {
	dependsOn setupGitRepo

	workingDir 'site-source'
	commandLine 'bundle install --quiet'.split(' ')
}

task setup {
	dependsOn setupGitRepo, setupJekyll
}

// -----
// CLEAN
// -----

task removeProjectPage(type: Delete) {
	delete fileTree('site-source/_pages') {
		include 'xp.*'
	}
}

task removeDocs(type: Delete) {
	delete 'site-source/_docs/xp'
}

task removeDocNav() {
	doLast {
		description 'Deletes specific lines in _data/naviation.yml'
		File nav = file('site-source/_data/navigation.yml')
		String fullNav = nav.getText()
		String removedNav = fullNav.replaceAll(/(?m)# @xp:start$\s^docs-xp:$\s(^[\D\d]*$\s)*^# @xp:end/, "# @xp:start\ndocs-xp:\n# @xp:end")
		nav.setText(removedNav)
	}
}

task removeVersion() {
	doLast {
		description 'Removes current version from site-source/_pages/home.md'
		File home = file('site-source/_pages/home.md')
		String homeText = home.getText()
		String homeTextWithVersion = homeText.replaceAll(/`org.junit-pioneer : junit-pioneer : [^`]*`/, "`org.junit-pioneer : junit-pioneer : @xp:version`")
		home.setText(homeTextWithVersion)
	}
}

task clean {
	dependsOn removeProjectPage, removeDocs, removeDocNav, removeVersion
}

// ------
// CREATE
// ------

task copyProjectPage(type: Copy) {
	from 'junit-pioneer/docs/'
	include 'project-page.*'
	rename 'project-page.(.*)', 'xp.$1'
	into 'site-source/_pages'
}

task copyDocs(type: Copy) {
	from 'junit-pioneer/docs'
	exclude 'project-page.*', 'docs-nav.yml', 'project-logo.jpg'
	into 'site-source/_docs/xp'
}

task insertDocNav() {
	doLast {
		description 'Inserts specific lines into _data/naviation.yml'
		String navContent = file('junit-pioneer/docs/docs-nav.yml').getText()
		File navTarget = file('site-source/_data/navigation.yml')
		String emptyNav = navTarget.getText()
		String fullNav = emptyNav.replaceAll(/(?m)# @xp:start$\s^docs-xp:$\s^# @xp:end/, "# @xp:start\ndocs-xp:\n${navContent}# @xp:end")
		navTarget.setText(fullNav)
	}
}

task insertVersion() {
	doLast {
		description 'Inserts current XP version into site-source/_pages/home.md'
		Properties properties = new Properties()
		file('junit-pioneer/version.properties').withInputStream { properties.load(it) }
		String version = properties.previousVersion
		File home = file('site-source/_pages/home.md')
		String homeText = home.getText()
		String homeTextWithVersion = homeText.replaceAll(/@xp:version/, "${version}")
		home.setText(homeTextWithVersion)
	}
}

task create {
	dependsOn copyProjectPage, copyDocs, insertDocNav, insertVersion
}

// -----
// BUILD
// -----

task recreate {
	dependsOn clean, create
}

task buildSite(type: Exec) {
	dependsOn recreate

	workingDir 'site-source'
	commandLine 'bundle exec jekyll build --destination ../site'.split(' ')
}

// -------
// PUBLISH
// -------

task pushSite(type: Exec) {
	commandLine './git-commit-push.sh'
}

task publishSite {
	dependsOn buildSite, pushSite
	pushSite.mustRunAfter buildSite
}
