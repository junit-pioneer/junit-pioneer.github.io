// -----
// SETUP
// -----

plugins {
	id 'org.ajoberstar.grgit' version '4.1.0'
}

ext {
	onCi = System.getenv("CI")
}

configure(rootProject) {

	task wrapper(type: Wrapper) {
		description = 'Generates gradlew and gradlew.bat scripts'
		gradleVersion = '3.5'
		jarFile = "${project.projectDir}/.infra/gradle/gradle-wrapper.jar"
	}

}

task setupGitOnCi(type: Exec) {
	commandLine './git-ci-setup.sh'
}

task setupGitRepo(type: Exec) {
	commandLine './git-repo-setup.sh'
	if (onCi)
		dependsOn setupGitOnCi
}

task setupJekyll(type: Exec) {
	dependsOn setupGitRepo

	workingDir 'site-source'
	commandLine 'bundle install --quiet'.split(' ')
}

task setup {
	dependsOn setupGitRepo, setupJekyll
}

// -----
// CLEAN
// -----

task removeProjectPage(type: Delete) {
	delete fileTree('site-source/_pages') {
		include 'xp.*', 'tr.*'
	}
}

task removeDocs(type: Delete) {
	delete 'site-source/_docs/xp', 'site-source/_docs/tr'
}

task removeDocNav() {
	doLast {
		description 'Deletes specific lines in _data/naviation.yml'
		File nav = file('site-source/_data/navigation.yml')
		String fullNav = nav.getText()
		String removedNav = fullNav
				.replaceAll(/(?m)# @xp:start$\s(^[\D\d]*$\s)*^# @xp:end/, "# @xp:toc")
				.replaceAll(/(?m)# @tr:start$\s(^[\D\d]*$\s)*^# @tr:end/, "# @tr:toc")
		nav.setText(removedNav)
	}
}

task removeXpFromHome {
	doLast {
		description 'Removes XP excerpt from _site-source/_pages/home.md'
		File home = file('site-source/_pages/home.md')
		String homeText = home.getText()
		String homeTextWithoutXpExcerpt = homeText.replaceAll(/(?m)^excerpt: .*/, "excerpt: @xp:excerpt")
		home.setText(homeTextWithoutXpExcerpt)
	}
}

task clean {
	dependsOn removeProjectPage, removeDocs, removeDocNav, removeXpFromHome
}

// ------
// CREATE
// ------

task copyPioneerProjectPage(type: Copy) {
	from 'junit-pioneer/docs/'
	include 'project-page.*'
	rename 'project-page.adoc', 'xp.adoc'
	into 'site-source/_pages'
}

task copyPioneerDocs(type: Copy) {
	from 'junit-pioneer/docs'
	exclude 'project-page.*', 'docs-nav.yml', 'project-logo.jpg'
	into 'site-source/_docs/xp'
}

task copyTestReportProjectPage(type: Copy) {
	from 'test-reports/docs/'
	include 'project-page.*'
	rename 'project-page.adoc', 'tr.adoc'
	into 'site-source/_pages'
}

task copyTestReportDocs(type: Copy) {
	from 'test-reports/docs'
	exclude 'project-page.*', 'docs-nav.yml'
	into 'site-source/_docs/tr'
}

task insertDocNav() {
	doLast {
		description 'Inserts specific lines into _data/naviation.yml'
		File navTarget = file('site-source/_data/navigation.yml')
		String emptyNav = navTarget.getText()

		String xpNavContent = file('junit-pioneer/docs/docs-nav.yml').getText()
		String trNavContent = file('test-reports/docs/docs-nav.yml').getText()
		String fullNav = emptyNav
				.replaceAll(/(?m)# @xp:toc/, "# @xp:start\n${xpNavContent}# @xp:end")
				.replaceAll(/(?m)# @tr:toc/, "# @tr:start\n${trNavContent}# @tr:end")

		navTarget.setText(fullNav)
	}
}

task insertVersion() {
	dependsOn copyPioneerProjectPage, copyTestReportProjectPage
	doLast {
		description 'Inserts current versions into about pages'
		insertProjectVersion('junit-pioneer', 'xp')
		insertProjectVersion('test-reports', 'tr')
	}
}

import org.ajoberstar.grgit.Tag
def insertProjectVersion(String project, String abbreviation) {
	String latestTagName = grgit
			.open(dir: project)
			.tag.list()
			.sort { it.commit.dateTime }
			.last()
			.name
	if (!latestTagName?.startsWith("v"))
		throw new IllegalStateException("Could not determine version of @${project}.")
	String version = latestTagName.substring(1)

	File about = file("site-source/_pages/${abbreviation}.adoc")
	String aboutText = about.getText()
	String aboutTextWithVersion = aboutText.replaceAll("@${abbreviation}:version", version)
	about.setText(aboutTextWithVersion)
}

task insertXpIntoHome() {
	dependsOn insertVersion
	doLast {
		description 'Inserts XP excerpt into _site-source/_pages/home.md'
		String xpContent = file('site-source/_pages/xp.adoc').getText()
		String excerpt = xpContent.find(/excerpt: .*/)
		File home = file('site-source/_pages/home.md')
		String homeText = home.getText()
		String homeTextWithXpExcerpt = homeText.replaceAll(/(?m)^excerpt: @xp:excerpt/, excerpt)
		home.setText(homeTextWithXpExcerpt)
	}
}

task create {
	dependsOn copyPioneerProjectPage, copyPioneerDocs, copyTestReportProjectPage, copyTestReportDocs, insertDocNav, insertVersion, insertXpIntoHome
}

// -----
// BUILD
// -----

task recreate {
	dependsOn clean, create
}

task buildSite(type: Exec) {
	dependsOn recreate

	workingDir 'site-source'
	commandLine 'bundle exec jekyll build --destination ../site'.split(' ')
}

// -------
// PUBLISH
// -------

task pushSite(type: Exec) {
	commandLine './git-commit-push.sh'
}

task publishSite {
	dependsOn buildSite, pushSite
	pushSite.mustRunAfter buildSite
}
